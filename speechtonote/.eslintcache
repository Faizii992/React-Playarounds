[{"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\ObjectDetection.js":"1","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\App.js":"2","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\index.js":"3","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\SpeechToNote.js":"4","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\HomePage.js":"5","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\comp\\Nav.js":"6","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\TextToSpeech.js":"7","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\Segmentation.js":"8","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\reportWebVitals.js":"9","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\Ocr.js":"10"},{"size":2858,"mtime":1608500669994,"results":"11","hashOfConfig":"12"},{"size":1265,"mtime":1608541569335,"results":"13","hashOfConfig":"12"},{"size":501,"mtime":1608533442264,"results":"14","hashOfConfig":"12"},{"size":3226,"mtime":1608500501349,"results":"15","hashOfConfig":"12"},{"size":677,"mtime":1608498325970,"results":"16","hashOfConfig":"12"},{"size":3510,"mtime":1608541614955,"results":"17","hashOfConfig":"12"},{"size":2803,"mtime":1608504794382,"results":"18","hashOfConfig":"12"},{"size":2359,"mtime":1608506173761,"results":"19","hashOfConfig":"12"},{"size":362,"mtime":1606209048416,"results":"20","hashOfConfig":"12"},{"size":2365,"mtime":1608540381712,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"1mrieep",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\ObjectDetection.js",["49","50","51","52"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Webcam from 'react-webcam';\r\nimport * as cocossd from '@tensorflow-models/coco-ssd';\r\n\r\nfunction ObjectDetection() {\r\n  const drawRect = (detections, ctx) => {\r\n    // Loop through each prediction\r\n    console.log(detections);\r\n    detections.forEach((prediction) => {\r\n      // Extract boxes and classes\r\n      console.log(prediction);\r\n      const [x, y, width, height] = prediction['bbox'];\r\n      const text = prediction['class'];\r\n\r\n      // Set styling\r\n      const color = Math.floor(Math.random() * 16777215).toString(16);\r\n      ctx.strokeStyle = '#' + color;\r\n      ctx.font = '28px Arial';\r\n\r\n      // Draw rectangles and text\r\n      ctx.beginPath();\r\n      ctx.fillStyle = '#' + color;\r\n      ctx.fillText(text, x, y);\r\n      ctx.rect(x, y, width, height);\r\n      ctx.stroke();\r\n    });\r\n  };\r\n  const CanvasRef = useRef(null);\r\n  const WebcamRef = useRef(null);\r\n  useEffect(() => {\r\n    runCoco();\r\n  }, []);\r\n  const runCoco = async () => {\r\n    const net = await cocossd.load();\r\n    console.log('detected');\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n  const detect = async (net) => {\r\n    if (\r\n      WebcamRef.current.video.readyState == 4 &&\r\n      WebcamRef.current != null &&\r\n      typeof WebcamRef.current != 'undefined'\r\n    ) {\r\n      console.log(WebcamRef.current.video.videoWidth);\r\n      console.log(WebcamRef.current.video.width);\r\n      WebcamRef.current.video.width = WebcamRef.current.video.videoWidth;\r\n\r\n      WebcamRef.current.video.height = WebcamRef.current.video.videoHeight;\r\n      CanvasRef.current.width = WebcamRef.current.video.width;\r\n      CanvasRef.current.height = WebcamRef.current.video.height;\r\n      const video = WebcamRef.current.video;\r\n      const obj = await net.detect(video);\r\n      const ctx = CanvasRef.current.getContext('2d');\r\n      drawRect(obj, ctx);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div class=\"alert alert-dismissible alert-warning\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">\r\n          &times;\r\n        </button>\r\n        <h4 class=\"alert-heading\">Oh yus!</h4>\r\n        <p class=\"mb-0\">Let's put a smile on that pretty face!</p>\r\n      </div>\r\n      <Webcam\r\n        muted={true}\r\n        ref={WebcamRef}\r\n        style={{\r\n          width: '50%',\r\n          position: 'absolute',\r\n          top: '25%',\r\n          left: '20%',\r\n          zindex: '8',\r\n        }}\r\n      ></Webcam>\r\n\r\n      <canvas\r\n        ref={CanvasRef}\r\n        style={{\r\n          width: '50%',\r\n          position: 'absolute',\r\n          top: '25%',\r\n          left: '20%',\r\n          zindex: '7',\r\n        }}\r\n      ></canvas>\r\n      <h3 style={{ textAlign: 'center' }}>Object Detection</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ObjectDetection;\r\n","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\App.js",["53","54"],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\index.js",[],["55","56"],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\SpeechToNote.js",["57"],"import React, { useState, useEffect } from 'react';\r\nconst SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst mic = new SpeechRecognition();\r\n\r\nmic.continuous = true;\r\nmic.interimResults = true;\r\nmic.lang = 'en-US';\r\nfunction SpeechToNote() {\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [note, setNote] = useState(null);\r\n  const [savedNotes, setSavedNotes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    HandleListen();\r\n  }, [isListening]);\r\n  function HandleListen() {\r\n    if (isListening) {\r\n      mic.start();\r\n      mic.onend = () => {\r\n        console.log('mic is on');\r\n        mic.start();\r\n      };\r\n    } else {\r\n      mic.stop();\r\n      mic.onend = () => {\r\n        console.log('mic is stopping');\r\n      };\r\n    }\r\n    mic.onstart = () => {\r\n      console.log('conclusion');\r\n    };\r\n    mic.onresult = (event) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0])\r\n        .map((result) => result.transcript)\r\n        .join('');\r\n      console.log(transcript);\r\n      setNote(transcript);\r\n      mic.onerror = (event) => {\r\n        console.log(event.error);\r\n      };\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={{ textAlign: 'center' }}>\r\n        <u>SPEECH TO NOTES WITH REACT</u>\r\n      </h2>\r\n      <div class=\"alert alert-success\" style={{ textAlign: 'center' }}>\r\n        Hit \"Start\", say what you wanna record. Once you're done, hit Stop and\r\n        then hit \"save note\" if you wanna save it\r\n      </div>\r\n      <h1 className=\"my-3\">Voice Notes</h1>\r\n      <div className=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"card border-primary mb-3\" style={{ maxWidth: '30rem' }}>\r\n            <div class=\"card-header\">Current Note</div>\r\n            <div class=\"card-body\">\r\n              <h4 class=\"card-title\">\r\n                {' '}\r\n                <button\r\n                  onClick={() => {\r\n                    setSavedNotes([...savedNotes, note]);\r\n                    setNote('');\r\n                  }}\r\n                  type=\"button\"\r\n                  class=\"btn btn-primary\"\r\n                  disabled={!note}\r\n                >\r\n                  Save new note\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"btn btn-secondary\"\r\n                  onClick={() => {\r\n                    setIsListening((prevState) => !prevState);\r\n                  }}\r\n                >\r\n                  {isListening ? <>Stop ðŸ”´ </> : <> Start ðŸŽ¤</>}\r\n                </button>\r\n              </h4>\r\n              <p class=\"card-text\"> {note}</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"card border-secondary mb-3\" style={{ maxWidth: '40rem' }}>\r\n            <div class=\"card-header\">SAVED NOTES</div>\r\n            <div class=\"card-body\">\r\n              <h4 class=\"card-title\">All your notes are down below</h4>\r\n              <p class=\"card-text\">\r\n                {savedNotes.map((x) => (\r\n                  <li key={x}>{x}</li>\r\n                ))}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpeechToNote;\r\n",["58","59"],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\HomePage.js",[],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\comp\\Nav.js",["60","61","62","63","64","65","66","67"],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\TextToSpeech.js",["68","69","70","71"],"import React, { useState } from 'react';\r\nimport { useSpeechSynthesis } from 'react-speech-kit';\r\nfunction TextToSpeech() {\r\n  const [val, setVal] = useState('');\r\n  const [rate, setRate] = useState(1);\r\n\r\n  const [voiceIndex, setVoiceIndex] = useState(null);\r\n\r\n  const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis();\r\n\r\n  const voice = voices[voiceIndex] || null;\r\n  return (\r\n    <div class=\" my-3\" style={{ margin: 'auto 0', textAlign: 'center' }}>\r\n      <h2> Quit saying tl;dr, right now!</h2>\r\n      <div class=\"alert alert-dismissible alert-warning\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">\r\n          &times;\r\n        </button>\r\n        <h4 class=\"alert-heading\"></h4>\r\n\r\n        <h4>\r\n          Do you wanna have someone read that humongous boring old\r\n          text/paragraph your friend sent you? <br></br> USE THIS\r\n        </h4>\r\n      </div>\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <textarea\r\n              onChange={(e) => {\r\n                setVal(e.target.value);\r\n              }}\r\n              style={{ width: '100%', minHeight: '130px' }}\r\n              class=\"form-control\"\r\n            ></textarea>\r\n            <button\r\n              onClick={() => {\r\n                speak({ text: val, rate: rate, voice });\r\n              }}\r\n              class=\"my-2 mx-1 btn btn-warning\"\r\n            >\r\n              PLAY!\r\n            </button>\r\n          </div>\r\n          <div class=\"col-md-6\">\r\n            <fieldset class=\"form-group my-4\">\r\n              <legend>Select how fast you wanna get it done with!(Rate)</legend>\r\n              <label for=\"customRange1\">Rate</label>\r\n              <input\r\n                style={{}}\r\n                type=\"range\"\r\n                class=\"custom-range\"\r\n                min=\"0\"\r\n                max=\"4\"\r\n                defaultValue=\"1\"\r\n                step=\"0.1\"\r\n                id=\"pitch\"\r\n                onChange={(event) => {\r\n                  setRate(event.target.value);\r\n                }}\r\n              />\r\n            </fieldset>\r\n            <legend>Select a cute little accent!</legend>\r\n            <select\r\n              id=\"voice\"\r\n              name=\"voice\"\r\n              value={voiceIndex || ''}\r\n              onChange={(event) => {\r\n                setVoiceIndex(event.target.value);\r\n              }}\r\n            >\r\n              <option value=\"\">Default</option>\r\n              {voices.map((option, index) => (\r\n                <option key={option.voiceURI} value={index}>\r\n                  {`${option.lang} - ${option.name}`}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextToSpeech;\r\n","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\Segmentation.js",["72"],"import React, { useRef } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as bodyPix from '@tensorflow-models/body-pix';\r\nimport Webcam from 'react-webcam';\r\n\r\nfunction Segmentation() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const runBodysegment = async () => {\r\n    const net = await bodyPix.load();\r\n\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    if (\r\n      typeof webcamRef.current !== 'undefined' &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n      const person = await net.segmentPersonParts(video);\r\n      console.log(person);\r\n      const coloredPartImage = bodyPix.toColoredPartMask(person);\r\n      const opacity = 0.7;\r\n      const flipHorizontal = false;\r\n      const maskBlurAmount = 0;\r\n      const canvas = canvasRef.current;\r\n\r\n      bodyPix.drawMask(\r\n        canvas,\r\n        video,\r\n        coloredPartImage,\r\n        opacity,\r\n        maskBlurAmount,\r\n        flipHorizontal\r\n      );\r\n    }\r\n  };\r\n\r\n  runBodysegment();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          style={{\r\n            position: 'absolute',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: 'center',\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: 'absolute',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: 'center',\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Segmentation;\r\n",["73","74"],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\reportWebVitals.js",[],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\Ocr.js",["75","76","77","78","79","80"],{"ruleId":"81","severity":1,"message":"82","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},{"ruleId":"81","severity":1,"message":"85","line":2,"column":13,"nodeType":"83","messageId":"84","endLine":2,"endColumn":15},{"ruleId":"86","severity":1,"message":"87","line":33,"column":6,"nodeType":"88","endLine":33,"endColumn":8,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":43,"column":42,"nodeType":"92","messageId":"93","endLine":43,"endColumn":44},{"ruleId":"81","severity":1,"message":"82","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},{"ruleId":"81","severity":1,"message":"94","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"86","severity":1,"message":"99","line":16,"column":6,"nodeType":"88","endLine":16,"endColumn":19,"suggestions":"100"},{"ruleId":"95","replacedBy":"101"},{"ruleId":"97","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":8,"column":11,"nodeType":"105","endLine":8,"endColumn":43},{"ruleId":"103","severity":1,"message":"104","line":36,"column":17,"nodeType":"105","endLine":36,"endColumn":46},{"ruleId":"103","severity":1,"message":"104","line":45,"column":17,"nodeType":"105","endLine":45,"endColumn":46},{"ruleId":"103","severity":1,"message":"104","line":54,"column":17,"nodeType":"105","endLine":54,"endColumn":46},{"ruleId":"103","severity":1,"message":"104","line":62,"column":17,"nodeType":"105","endLine":62,"endColumn":46},{"ruleId":"103","severity":1,"message":"104","line":70,"column":17,"nodeType":"105","endLine":70,"endColumn":46},{"ruleId":"103","severity":1,"message":"104","line":77,"column":15,"nodeType":"105","endLine":77,"endColumn":44},{"ruleId":"103","severity":1,"message":"104","line":83,"column":15,"nodeType":"105","endLine":83,"endColumn":44},{"ruleId":"81","severity":1,"message":"106","line":9,"column":18,"nodeType":"83","messageId":"84","endLine":9,"endColumn":24},{"ruleId":"81","severity":1,"message":"107","line":9,"column":26,"nodeType":"83","messageId":"84","endLine":9,"endColumn":34},{"ruleId":"81","severity":1,"message":"108","line":9,"column":36,"nodeType":"83","messageId":"84","endLine":9,"endColumn":45},{"ruleId":"109","severity":1,"message":"110","line":19,"column":9,"nodeType":"105","endLine":19,"endColumn":35},{"ruleId":"81","severity":1,"message":"85","line":2,"column":13,"nodeType":"83","messageId":"84","endLine":2,"endColumn":15},{"ruleId":"95","replacedBy":"111"},{"ruleId":"97","replacedBy":"112"},{"ruleId":"81","severity":1,"message":"94","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"113","line":16,"column":7,"nodeType":"83","messageId":"84","endLine":16,"endColumn":16},{"ruleId":"81","severity":1,"message":"106","line":30,"column":18,"nodeType":"83","messageId":"84","endLine":30,"endColumn":24},{"ruleId":"81","severity":1,"message":"107","line":30,"column":26,"nodeType":"83","messageId":"84","endLine":30,"endColumn":34},{"ruleId":"81","severity":1,"message":"108","line":30,"column":36,"nodeType":"83","messageId":"84","endLine":30,"endColumn":45},{"ruleId":"81","severity":1,"message":"114","line":30,"column":47,"nodeType":"83","messageId":"84","endLine":30,"endColumn":53},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'tf' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'runCoco'. Either include it or remove the dependency array.","ArrayExpression",["115"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","no-native-reassign",["116"],"no-negated-in-lhs",["117"],"React Hook useEffect has a missing dependency: 'HandleListen'. Either include it or remove the dependency array.",["118"],["116"],["117"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'cancel' is assigned a value but never used.","'speaking' is assigned a value but never used.","'supported' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.",["116"],["117"],"'workerRef' is assigned a value but never used.","'voices' is assigned a value but never used.",{"desc":"119","fix":"120"},"no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [runCoco]",{"range":"123","text":"124"},"Update the dependencies array to be: [HandleListen, isListening]",{"range":"125","text":"126"},[1027,1029],"[runCoco]",[486,499],"[HandleListen, isListening]"]