[{"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\ObjectDetection.js":"1","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\App.js":"2","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\index.js":"3","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\SpeechToNote.js":"4","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\HomePage.js":"5","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\comp\\Nav.js":"6","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\TextToSpeech.js":"7","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\Segmentation.js":"8"},{"size":2858,"mtime":1608500669994,"results":"9","hashOfConfig":"10"},{"size":1170,"mtime":1608505945480,"results":"11","hashOfConfig":"10"},{"size":500,"mtime":1606209048416,"results":"12","hashOfConfig":"10"},{"size":3226,"mtime":1608500501349,"results":"13","hashOfConfig":"10"},{"size":677,"mtime":1608498325970,"results":"14","hashOfConfig":"10"},{"size":3172,"mtime":1608505974471,"results":"15","hashOfConfig":"10"},{"size":2803,"mtime":1608504794382,"results":"16","hashOfConfig":"10"},{"size":2359,"mtime":1608506173761,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1mrieep",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\ObjectDetection.js",["39","40","41","42"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Webcam from 'react-webcam';\r\nimport * as cocossd from '@tensorflow-models/coco-ssd';\r\n\r\nfunction ObjectDetection() {\r\n  const drawRect = (detections, ctx) => {\r\n    // Loop through each prediction\r\n    console.log(detections);\r\n    detections.forEach((prediction) => {\r\n      // Extract boxes and classes\r\n      console.log(prediction);\r\n      const [x, y, width, height] = prediction['bbox'];\r\n      const text = prediction['class'];\r\n\r\n      // Set styling\r\n      const color = Math.floor(Math.random() * 16777215).toString(16);\r\n      ctx.strokeStyle = '#' + color;\r\n      ctx.font = '28px Arial';\r\n\r\n      // Draw rectangles and text\r\n      ctx.beginPath();\r\n      ctx.fillStyle = '#' + color;\r\n      ctx.fillText(text, x, y);\r\n      ctx.rect(x, y, width, height);\r\n      ctx.stroke();\r\n    });\r\n  };\r\n  const CanvasRef = useRef(null);\r\n  const WebcamRef = useRef(null);\r\n  useEffect(() => {\r\n    runCoco();\r\n  }, []);\r\n  const runCoco = async () => {\r\n    const net = await cocossd.load();\r\n    console.log('detected');\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n  const detect = async (net) => {\r\n    if (\r\n      WebcamRef.current.video.readyState == 4 &&\r\n      WebcamRef.current != null &&\r\n      typeof WebcamRef.current != 'undefined'\r\n    ) {\r\n      console.log(WebcamRef.current.video.videoWidth);\r\n      console.log(WebcamRef.current.video.width);\r\n      WebcamRef.current.video.width = WebcamRef.current.video.videoWidth;\r\n\r\n      WebcamRef.current.video.height = WebcamRef.current.video.videoHeight;\r\n      CanvasRef.current.width = WebcamRef.current.video.width;\r\n      CanvasRef.current.height = WebcamRef.current.video.height;\r\n      const video = WebcamRef.current.video;\r\n      const obj = await net.detect(video);\r\n      const ctx = CanvasRef.current.getContext('2d');\r\n      drawRect(obj, ctx);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div class=\"alert alert-dismissible alert-warning\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">\r\n          &times;\r\n        </button>\r\n        <h4 class=\"alert-heading\">Oh yus!</h4>\r\n        <p class=\"mb-0\">Let's put a smile on that pretty face!</p>\r\n      </div>\r\n      <Webcam\r\n        muted={true}\r\n        ref={WebcamRef}\r\n        style={{\r\n          width: '50%',\r\n          position: 'absolute',\r\n          top: '25%',\r\n          left: '20%',\r\n          zindex: '8',\r\n        }}\r\n      ></Webcam>\r\n\r\n      <canvas\r\n        ref={CanvasRef}\r\n        style={{\r\n          width: '50%',\r\n          position: 'absolute',\r\n          top: '25%',\r\n          left: '20%',\r\n          zindex: '7',\r\n        }}\r\n      ></canvas>\r\n      <h3 style={{ textAlign: 'center' }}>Object Detection</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ObjectDetection;\r\n","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\App.js",["43","44"],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\index.js",[],["45","46"],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\SpeechToNote.js",["47"],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\HomePage.js",[],"E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\comp\\Nav.js",["48","49","50","51","52","53","54"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nfunction Nav() {\r\n  return (\r\n    <div>\r\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <a class=\"navbar-brand\" href=\"#\">\r\n          Home\r\n        </a>\r\n        <button\r\n          class=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarColor02\"\r\n          aria-controls=\"navbarColor02\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n          <ul class=\"navbar-nav mr-auto\">\r\n            {/* <li class=\"nav-item active\">\r\n              <Link to=\"/\">\r\n                <a class=\"nav-link\" href=\"#\">\r\n                  Home\r\n                  <span class=\"sr-only\">(current)</span>\r\n                </a>\r\n              </Link>\r\n            </li> */}\r\n            <li class=\"nav-item active\">\r\n              <Link to=\"/speechtonote\">\r\n                <a class=\"nav-link\" href=\"#\">\r\n                  Speech To Note\r\n                  <span class=\"sr-only\">(current)</span>\r\n                </a>\r\n              </Link>\r\n            </li>\r\n\r\n            <li class=\"nav-item active\">\r\n              <Link to=\"/texttospeech\">\r\n                <a class=\"nav-link\" href=\"#\">\r\n                  Text to Speech\r\n                  <span class=\"sr-only\">(current)</span>\r\n                </a>\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item active\">\r\n              <Link to=\"/objdetect\">\r\n                <a class=\"nav-link\" href=\"#\">\r\n                  Object Detection\r\n                  <span class=\"sr-only\">(current)</span>\r\n                </a>\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item active\">\r\n              <Link to=\"/segmentation\">\r\n                <a class=\"nav-link\" href=\"#\">\r\n                  Body Segmentation\r\n                  <span class=\"sr-only\">(current)</span>\r\n                </a>\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">\r\n                Features\r\n              </a>\r\n            </li>\r\n\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">\r\n                About\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-secondary\"\r\n          title=\"\"\r\n          data-container=\"body\"\r\n          data-toggle=\"popover\"\r\n          data-placement=\"left\"\r\n          data-content=\"This doesn't do anything\"\r\n          data-original-title=\"Popover Title\"\r\n        >\r\n          Left\r\n        </button>\r\n        <form class=\"form-inline my-2 my-lg-0\">\r\n          <input\r\n            class=\"form-control mr-sm-2\"\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n          ></input>\r\n          <button class=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">\r\n            Search\r\n          </button>\r\n        </form>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\TextToSpeech.js",["55","56","57","58"],"import React, { useState } from 'react';\r\nimport { useSpeechSynthesis } from 'react-speech-kit';\r\nfunction TextToSpeech() {\r\n  const [val, setVal] = useState('');\r\n  const [rate, setRate] = useState(1);\r\n\r\n  const [voiceIndex, setVoiceIndex] = useState(null);\r\n\r\n  const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis();\r\n\r\n  const voice = voices[voiceIndex] || null;\r\n  return (\r\n    <div class=\" my-3\" style={{ margin: 'auto 0', textAlign: 'center' }}>\r\n      <h2> Quit saying tl;dr, right now!</h2>\r\n      <div class=\"alert alert-dismissible alert-warning\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">\r\n          &times;\r\n        </button>\r\n        <h4 class=\"alert-heading\"></h4>\r\n\r\n        <h4>\r\n          Do you wanna have someone read that humongous boring old\r\n          text/paragraph your friend sent you? <br></br> USE THIS\r\n        </h4>\r\n      </div>\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <textarea\r\n              onChange={(e) => {\r\n                setVal(e.target.value);\r\n              }}\r\n              style={{ width: '100%', minHeight: '130px' }}\r\n              class=\"form-control\"\r\n            ></textarea>\r\n            <button\r\n              onClick={() => {\r\n                speak({ text: val, rate: rate, voice });\r\n              }}\r\n              class=\"my-2 mx-1 btn btn-warning\"\r\n            >\r\n              PLAY!\r\n            </button>\r\n          </div>\r\n          <div class=\"col-md-6\">\r\n            <fieldset class=\"form-group my-4\">\r\n              <legend>Select how fast you wanna get it done with!(Rate)</legend>\r\n              <label for=\"customRange1\">Rate</label>\r\n              <input\r\n                style={{}}\r\n                type=\"range\"\r\n                class=\"custom-range\"\r\n                min=\"0\"\r\n                max=\"4\"\r\n                defaultValue=\"1\"\r\n                step=\"0.1\"\r\n                id=\"pitch\"\r\n                onChange={(event) => {\r\n                  setRate(event.target.value);\r\n                }}\r\n              />\r\n            </fieldset>\r\n            <legend>Select a cute little accent!</legend>\r\n            <select\r\n              id=\"voice\"\r\n              name=\"voice\"\r\n              value={voiceIndex || ''}\r\n              onChange={(event) => {\r\n                setVoiceIndex(event.target.value);\r\n              }}\r\n            >\r\n              <option value=\"\">Default</option>\r\n              {voices.map((option, index) => (\r\n                <option key={option.voiceURI} value={index}>\r\n                  {`${option.lang} - ${option.name}`}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextToSpeech;\r\n","E:\\MERN APPS FOR UPLOAD\\MERN APPS\\Ai\\SpeechNote\\speechtonote\\src\\screens\\Segmentation.js",["59"],"import React, { useRef } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as bodyPix from '@tensorflow-models/body-pix';\r\nimport Webcam from 'react-webcam';\r\n\r\nfunction Segmentation() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const runBodysegment = async () => {\r\n    const net = await bodyPix.load();\r\n\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    if (\r\n      typeof webcamRef.current !== 'undefined' &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n      const person = await net.segmentPersonParts(video);\r\n      console.log(person);\r\n      const coloredPartImage = bodyPix.toColoredPartMask(person);\r\n      const opacity = 0.7;\r\n      const flipHorizontal = false;\r\n      const maskBlurAmount = 0;\r\n      const canvas = canvasRef.current;\r\n\r\n      bodyPix.drawMask(\r\n        canvas,\r\n        video,\r\n        coloredPartImage,\r\n        opacity,\r\n        maskBlurAmount,\r\n        flipHorizontal\r\n      );\r\n    }\r\n  };\r\n\r\n  runBodysegment();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          style={{\r\n            position: 'absolute',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: 'center',\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: 'absolute',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: 'center',\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Segmentation;\r\n",{"ruleId":"60","severity":1,"message":"61","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"64","line":2,"column":13,"nodeType":"62","messageId":"63","endLine":2,"endColumn":15},{"ruleId":"65","severity":1,"message":"66","line":33,"column":6,"nodeType":"67","endLine":33,"endColumn":8,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":43,"column":42,"nodeType":"71","messageId":"72","endLine":43,"endColumn":44},{"ruleId":"60","severity":1,"message":"61","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"73","line":1,"column":27,"nodeType":"62","messageId":"63","endLine":1,"endColumn":36},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"65","severity":1,"message":"78","line":16,"column":6,"nodeType":"67","endLine":16,"endColumn":19,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":7,"column":9,"nodeType":"82","endLine":7,"endColumn":42},{"ruleId":"80","severity":1,"message":"81","line":34,"column":17,"nodeType":"82","endLine":34,"endColumn":46},{"ruleId":"80","severity":1,"message":"81","line":43,"column":17,"nodeType":"82","endLine":43,"endColumn":46},{"ruleId":"80","severity":1,"message":"81","line":51,"column":17,"nodeType":"82","endLine":51,"endColumn":46},{"ruleId":"80","severity":1,"message":"81","line":59,"column":17,"nodeType":"82","endLine":59,"endColumn":46},{"ruleId":"80","severity":1,"message":"81","line":66,"column":15,"nodeType":"82","endLine":66,"endColumn":44},{"ruleId":"80","severity":1,"message":"81","line":72,"column":15,"nodeType":"82","endLine":72,"endColumn":44},{"ruleId":"60","severity":1,"message":"83","line":9,"column":18,"nodeType":"62","messageId":"63","endLine":9,"endColumn":24},{"ruleId":"60","severity":1,"message":"84","line":9,"column":26,"nodeType":"62","messageId":"63","endLine":9,"endColumn":34},{"ruleId":"60","severity":1,"message":"85","line":9,"column":36,"nodeType":"62","messageId":"63","endLine":9,"endColumn":45},{"ruleId":"86","severity":1,"message":"87","line":19,"column":9,"nodeType":"82","endLine":19,"endColumn":35},{"ruleId":"60","severity":1,"message":"64","line":2,"column":13,"nodeType":"62","messageId":"63","endLine":2,"endColumn":15},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'tf' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'runCoco'. Either include it or remove the dependency array.","ArrayExpression",["88"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","no-native-reassign",["89"],"no-negated-in-lhs",["90"],"React Hook useEffect has a missing dependency: 'HandleListen'. Either include it or remove the dependency array.",["91"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'cancel' is assigned a value but never used.","'speaking' is assigned a value but never used.","'supported' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.",{"desc":"92","fix":"93"},"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [runCoco]",{"range":"96","text":"97"},"Update the dependencies array to be: [HandleListen, isListening]",{"range":"98","text":"99"},[1027,1029],"[runCoco]",[486,499],"[HandleListen, isListening]"]